abs(cor(sim$factor_z, afm$factor_z))
mean( apply( abs(cor(sim$factor_z, afm$factor_z)), 1, max ) )
# set.seed(123456)
n <- 150
p <- 50
q <- 2
sim <- simulate_afm(n = n,p = p, q = q, sde = 1)
# SQL:
system.time(
sql <- SQL2(sim$data, q = q, lambda = 0.5, d = 4, max_cycles = 10, max_iter = 1 )
)
abs(cor(sim$factor_z, sql$factor))
mean( apply( abs(cor(sim$factor_z, sql$factor)), 1, max ) )
# Multiple comparisons:
fit <- function(est, ref) mean( apply( abs(cor(ref, est)), 1, max ) )
# Multiple comparisons:
fit <- function(est, ref) mean( apply( abs(cor(ref, est)), 1, max ) )
out <- t(replicate(10,{
Niter <- 10
d <- 4
lambda <- 0.5
sim <- simulate_afm(n = n, p = p, q = q, sde = 1)
sql <- SQL2(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter, max_iter = 1 )
sql2 <- SQL(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter, max_iter = 1 )
sql3 <- SQL(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter / 2, max_iter = 2 )
afm <- AFM::AFM(sim$data, q = q, lambda = lambda, K = d, Niter = Niter )
out <- sapply(list(sql$factor, sql2$factor, sql3$factor, afm$factor_z), fit, ref = sim$factor_z)
names(out ) <- c("1ter2", "1iter", "2iter", "afm")
out
}))
colMeans(out)
summary(out)
# Multiple comparisons:
fit <- function(est, ref) mean( apply( abs(cor(ref, est)), 1, max ) )
out <- t(replicate(10,{
Niter <- 10
d <- 4
lambda <- 0.5
q <- 3
sim <- simulate_afm(n = n, p = p, q = q, sde = 1)
sql <- SQL2(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter, max_iter = 1 )
sql2 <- SQL(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter, max_iter = 1 )
sql3 <- SQL(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter / 2, max_iter = 2 )
afm <- AFM::AFM(sim$data, q = q, lambda = lambda, K = d, Niter = Niter )
out <- sapply(list(sql$factor, sql2$factor, sql3$factor, afm$factor_z), fit, ref = sim$factor_z)
names(out ) <- c("1ter2", "1iter", "2iter", "afm")
out
}))
colMeans(out)
summary(out)
# Multiple comparisons:
fit <- function(est, ref) mean( apply( abs(cor(ref, est)), 1, max ) )
out <- t(replicate(10,{
Niter <- 12
d <- 4
lambda <- 0.5
q <- 3
sim <- simulate_afm(n = n, p = p, q = q, sde = 1)
sql <- SQL2(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter, max_iter = 1 )
sql2 <- SQL(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter, max_iter = 1 )
sql3 <- SQL(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter * 3 / 4, max_iter = 2 )
afm <- AFM::AFM(sim$data, q = q, lambda = lambda, K = d, Niter = Niter )
out <- sapply(list(sql$factor, sql2$factor, sql3$factor, afm$factor_z), fit, ref = sim$factor_z)
names(out ) <- c("1ter2", "1iter", "2iter", "afm")
out
}))
colMeans(out)
summary(out)
apply(out, 2, median )
# Multiple comparisons:
fit <- function(est, ref) mean( apply( abs(cor(ref, est)), 1, max ) )
out <- t(replicate(10,{
Niter <- 12
d <- 4
lambda <- 0.5
p <- 100
q <- 5
sim <- simulate_afm(n = n, p = p, q = q, sde = 1)
sql <- SQL2(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter, max_iter = 1 )
sql2 <- SQL(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter, max_iter = 1 )
sql3 <- SQL(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter * 3 / 4, max_iter = 2 )
afm <- AFM::AFM(sim$data, q = q, lambda = lambda, K = d, Niter = Niter )
out <- sapply(list(sql$factor, sql2$factor, sql3$factor, afm$factor_z), fit, ref = sim$factor_z)
names(out ) <- c("1ter2", "1iter", "2iter", "afm")
out
}))
colMeans(out)
summary(out)
# Multiple comparisons:
fit <- function(est, ref) mean( apply( abs(cor(ref, est)), 1, max ) )
out <- t(replicate(10,{
Niter <- 12
d <- 4
lambda <- 0.5
p <- 100
q <- 5
sim <- simulate_afm(n = n, p = p, q = q, sde = 1)
sql <- SQL2(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter, max_iter = 1 )
sql2 <- SQL2(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter, max_iter = 2 )
afm <- AFM::AFM(sim$data, q = q, lambda = lambda, K = d, Niter = Niter )
out <- sapply(list(sql$factor, sql2$factor, sql3$factor, afm$factor_z), fit, ref = sim$factor_z)
names(out ) <- c("1iter", "2iter", "afm")
out
}))
colMeans(out)
backfitting2 <- function(x, M, P, tol = 1e-4, max_iter = 30, max_cycles = 10 ){
q <- length(P)
max_temp <- 1
for(it in 1:max_cycles){
G <- lapply(1:q, function(l) M %*% t(P[[l]]) %*% x )
if(it == max_cycles){ max_temp <- max_iter }
for(l in 1:q ){
U <- as.matrix( x - Reduce( '+', lapply( (1:q)[-l], function(k) P[[k]] %*% G[[k]] ) ) )
qap <- qap_solve(U, M, P[[l]], tol, max_temp, print = FALSE )
P[[l]] <- qap$Pmat
}
}
mse <- get_mse(x, M, P)
return(list(P = P, mse = unlist( mse ), convergence = TRUE ))
}
# SQL:
system.time(
sql <- SQL2(sim$data, q = q, lambda = 0.5, d = 4, max_cycles = 10, max_iter = 1 )
)
abs(cor(sim$factor_z, sql$factor))
mean( apply( abs(cor(sim$factor_z, sql$factor)), 1, max ) )
# SQL without iterations:
system.time(
sql2 <- SQL(sim$data, q = q, lambda = 0.5, d = 4, max_cycles = 10, max_iter = 1 )
)
# SQL without iterations:
system.time(
sql2 <- SQL(sim$data, q = q, lambda = 0.5, d = 4, max_cycles = 10, max_iter = 30 )
)
# SQL without iterations:
system.time(
sql2 <- SQL(sim$data, q = q, lambda = 0.5, d = 4, max_cycles = 10, max_iter = 2 )
)
# set.seed(123456)
n <- 150
p <- 50
q <- 2
sim <- simulate_afm(n = n,p = p, q = q, sde = 1)
# SQL:
system.time(
sql <- SQL2(sim$data, q = q, lambda = 0.5, d = 4, max_cycles = 10, max_iter = 1 )
)
abs(cor(sim$factor_z, sql$factor))
mean( apply( abs(cor(sim$factor_z, sql$factor)), 1, max ) )
# SQL without iterations:
system.time(
sql2 <- SQL(sim$data, q = q, lambda = 0.5, d = 4, max_cycles = 10, max_iter = 2 )
)
# SQL without iterations:
system.time(
sql2 <- SQL(sim$data, q = q, lambda = 0.5, d = 4, max_cycles = 10, max_iter = 1 )
)
# SQL without iterations:
system.time(
sql2 <- SQL2(sim$data, q = q, lambda = 0.5, d = 4, max_cycles = 10, max_iter = 1 )
)
# SQL without iterations:
system.time(
sql2 <- SQL2(sim$data, q = q, lambda = 0.5, d = 4, max_cycles = 10, max_iter = 2 )
)
# SQL without iterations:
system.time(
sql2 <- SQL2(sim$data, q = q, lambda = 0.5, d = 4, max_cycles = 10, max_iter = 30 )
)
abs(cor(sim$factor_z, sql2$factor))
mean( apply( abs(cor(sim$factor_z, sql2$factor)), 1, max ) )
# Multiple comparisons:
fit <- function(est, ref) mean( apply( abs(cor(ref, est)), 1, max ) )
out <- t(replicate(10,{
Niter <- 12
d <- 4
lambda <- 0.5
p <- 100
q <- 5
sim <- simulate_afm(n = n, p = p, q = q, sde = 1)
sql <- SQL2(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter, max_iter = 1 )
sql2 <- SQL2(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter, max_iter = 30 )
afm <- AFM::AFM(sim$data, q = q, lambda = lambda, K = d, Niter = Niter )
out <- sapply(list(sql$factor, sql2$factor, afm$factor_z), fit, ref = sim$factor_z)
names(out ) <- c("1iter", "2iter", "afm")
out
}))
colMeans(out)
summary(out)
# Multiple comparisons:
fit <- function(est, ref) min( apply( abs(cor(ref, est)), 1, max ) )
out <- t(replicate(10,{
Niter <- 12
d <- 4
lambda <- 0.5
p <- 100
q <- 5
sim <- simulate_afm(n = n, p = p, q = q, sde = 1)
sql <- SQL2(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter, max_iter = 1 )
sql2 <- SQL2(sim$data, q = q, lambda = lambda, d = d, max_cycles = Niter, max_iter = 30 )
afm <- AFM::AFM(sim$data, q = q, lambda = lambda, K = d, Niter = Niter )
out <- sapply(list(sql$factor, sql2$factor, afm$factor_z), fit, ref = sim$factor_z)
names(out ) <- c("1iter", "2iter", "afm")
out
}))
colMeans(out)
summary(out)
# set.seed(123456)
n <- 150
p <- 200
q <- 1
sim <- simulate_afm(n = n,p = p, q = q, sde = 0.5)
# debugonce(SQL)
# debugonce(hungarian_update)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 5 )
)
# comparison with the true factor:
plot(sql, col = "red", lwd = 2)
lines(sim$factor_z, col = "blue", lwd = 2)
# comparison with the true factor:
plot(sql, col = "red", lwd = 2)
lines(sim$factor_z, col = "blue", lwd = 2)
plot(sim$factor_z ~ sql$factor)
cor(sim$factor_z, sql$factor)
# comparing the generator:
grid <- qnorm( 1:n/ (n+1) )
true_generator <- sim$generator[[1]](grid)
pred <- predict(sql)
p_index <- sample(1:150, 9) # select randomly 9 functions for plotting
par(mfrow = c(3,3), mar = rep(2.5, 4))
for(j in p_index){
plot(true_generator[, j] ~ grid, type = "l", ylab = "", xlab = "" )
lines(pred$generator[[1]][, j] ~ grid, type = "l", col = "red" )
}
# set.seed(123456)
n <- 150
p <- 1000
q <- 1
sim <- simulate_afm(n = n,p = p, q = q, sde = 0.5)
# debugonce(SQL)
# debugonce(hungarian_update)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 5 )
)
sim$data
p <- 100
q <- 1
sim <- simulate_afm(n = n,p = p, q = q, sde = 0.5)
# debugonce(SQL)
# debugonce(hungarian_update)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 5 )
)
p <- 10000
q <- 1
sim <- simulate_afm(n = n,p = p, q = q, sde = 0.5)
# debugonce(SQL)
# debugonce(hungarian_update)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 5 )
)
sql <- SQL(sim$data, lambda = 0.5, d = 5 )
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 1 )
)
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 1 )
a <- matrix(rnorm(n^2), ncol = n)
a
a <- matrix(rnorm(n^2), ncol = n)
x <- matrix(rnorm(n*p), ncol = n)
x
system.time(
rowSums((a %*% x)^2)
)
# try to optimize the following:
n <- 150
p <- 10000
a <- matrix(rnorm(n^2), ncol = n)
x <- matrix(rnorm(n*p), ncol = n)
system.time(
rowSums((a %*% x)^2)
)
(a %*% x)
# try to optimize the following:
n <- 150
p <- 10000
a <- matrix(rnorm(n^2), ncol = n)
x <- matrix(rnorm(n*p), ncol = p)
system.time(
rowSums((a %*% x)^2)
)
# try to optimize the following:
n <- 200
p <- 50000
a <- matrix(rnorm(n^2), ncol = n)
x <- matrix(rnorm(n*p), ncol = p)
system.time(
rowSums((a %*% x)^2)
)
sim <- simulate_afm(n = n,p = p, q = q, sde = 0.5)
data <- sim$data
p <- 1000
a <- matrix(rnorm(n^2), ncol = n)
x <- matrix(rnorm(n*p), ncol = p)
# try to optimize the following:
n <- 200
p <- 1000
sim <- simulate_afm(n = n,p = p, q = q, sde = 0.5)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 1 )
)
data <- sim$data
x <- scale( data, scale = FALSE)
grid <- 1:nrow(x) / (nrow(x)+1)
P_init <- get_initial_P(x, q )
splines <- get_splines_basis( d = d + 1 )
M <- get_projection_matrix(splines, grid, lambda )
hungarian_update <- function( x, M, Pmat, x2 ){
cost <- - 2 * as.matrix( x2 %*% Pmat %*% t(M) )
G <- as.matrix(M %*% t(Pmat) ) %*% x
cost <- t( t( cost + rowSums( x^2 ) ) + rowSums( G^2 ) )
ord <- clue::solve_LSAP( cost )
Pmat <- t(get_permutationMatrix( ord ))
}
cost <- - 2 * as.matrix( x2 %*% Pmat %*% t(M) )
Pmat <- P_init[[1]]
x2 <- x %*% t(x)
cost <- - 2 * as.matrix( x2 %*% Pmat %*% t(M) )
G <- as.matrix(M %*% t(Pmat) ) %*% x
cost <- t( t( cost + rowSums( x^2 ) ) + rowSums( G^2 ) )
ord <- clue::solve_LSAP( cost )
Pmat <- t(get_permutationMatrix( ord ))
rowSums( G^2 )
x2 %*% P %*% t(M) %*% M %*% t(Pmat)
x2
dim(x2)
x2 %*% P %*% t(M) %*% M %*% t(Pmat)
x2 %*% P
x2 %*% Pmat %*% t(M) %*% M %*% t(Pmat)
diag( x2 %*% Pmat %*% t(M) %*% M %*% t(Pmat) )
a <- diag( x2 %*% Pmat %*% t(M) %*% M %*% t(Pmat) )
rowSums( G^2 )
a == rowSums( G^2 )
a
rowSums( G^2 )
a <- rowSums( G^2 )
a
G %*% t(G)
diag( G %*% t(G) )
b <- diag( G %*% t(G) )
a == b
a <- rowSums( G^2 )
a
b <- diag( G %*% t(G) )
b
all.equal(a, b)
a - b
G2 <- diag( M %*% t(Pmat) %*% x2 %*% Pmat %*% t(M) )
rowSums( G^2 )
G2
cost <- - 2 * as.matrix( x2 %*% Pmat %*% t(M) )
G <- as.matrix(M %*% t(Pmat) ) %*% x
# a <- diag( x2 %*% Pmat %*% t(M) %*% M %*% t(Pmat) )
rowSums( G^2 )
a <- rowSums( G^2 )
b <- diag( G %*% t(G) )
a - b
a
G2 <- diag( M %*% t(Pmat) %*% x2 %*% Pmat %*% t(M) )
G2
a - G2
rowSums( x^2 )
diag(x2)
hungarian_update <- function( x, M, Pmat, x2 ){
cost <- - 2 * as.matrix( x2 %*% Pmat %*% t(M) )
G <- as.matrix(M %*% t(Pmat) ) %*% x
cost <- t( t( cost + rowSums( x^2 ) ) + rowSums( G^2 ) )
ord <- clue::solve_LSAP( cost )
Pmat <- t(get_permutationMatrix( ord ))
}
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 1 )
)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 20 )
)
# try to optimize the following:
n <- 200
p <- 5000
a <- matrix(rnorm(n^2), ncol = n)
x <- matrix(rnorm(n*p), ncol = p)
# try to optimize the following:
n <- 200
p <- 5000
sim <- simulate_afm(n = n,p = p, q = q, sde = 0.5)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 1 )
)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 10 )
)
hungarian_update <- function( x, M, Pmat, x2 ){
cost <- - 2 * as.matrix( x2 %*% Pmat %*% t(M) )
G2 <- diag( M %*% t(Pmat) %*% x2 %*% Pmat %*% t(M) )
cost <- t( t( cost + diag(x2) ) + G2 )
ord <- clue::solve_LSAP( cost )
Pmat <- t(get_permutationMatrix( ord ) )
}
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 1 )
)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 10 )
)
p <- 500
sim <- simulate_afm(n = n,p = p, q = q, sde = 0.5)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 10 )
)
p <- 5000
sim <- simulate_afm(n = n,p = p, q = q, sde = 0.5)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 10 )
)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 1 )
)
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 1 )
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 1 )
)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 10 )
)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 50 )
)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 1 )
)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 2 )
)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 3 )
)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 4 )
)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 30 )
)
p <- 10000
a <- matrix(rnorm(n^2), ncol = n)
# try to optimize the following:
n <- 200
p <- 10000
sim <- simulate_afm(n = n,p = p, q = q, sde = 0.5)
system.time(
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 30 )
)
sql <- SQL(sim$data, lambda = 0.5, d = 4, max_iter = 30 )
# set.seed(123456)
n <- 150
p <- 100
q <- 2
sim <- simulate_afm(n = n,p = p, q = q, sde = 1)
# SQL:
system.time(
sql <- SQL2(sim$data, q = q, lambda = 0.5, d = 4, max_cycles = 10, max_iter = 1 )
)
abs(cor(sim$factor_z, sql$factor))
mean( apply( abs(cor(sim$factor_z, sql$factor)), 1, max ) )
q <- 3
sim <- simulate_afm(n = n,p = p, q = q, sde = 1)
# SQL:
system.time(
sql <- SQL2(sim$data, q = q, lambda = 0.5, d = 4, max_cycles = 10, max_iter = 1 )
)
abs(cor(sim$factor_z, sql$factor))
devtools::create("./SQL/sql")
# rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
devtools::create("./SQL/sql")
?here::dr_here
setwd(./SQL)
setwd(.\SQL)
setwd(./SQL)
setwd(SQL)
setwd("./SQL")
?here::dr_here
here::dr_here()
?devtools::create
# after adding documetation
devtools::document("./SQL/sql")
# after adding documetation
devtools::document("./sql")
devtools::create("./SQL/sql")
devtools::create("./sql")
# after adding documetation
devtools::document("./sql")
devtools::install_github("jbodelet/SQL/sql")
devtools::install_github("jbodelet/SQL/sql")
library(sql)
library(sql)
library(Rfast)
library(Matrix)
set.seed(123456)
sim <- SQL:::simulate_afm(n = 150, p = 200, q = 1, sde = 1)
sim <- sql:::simulate_afm(n = 150, p = 200, q = 1, sde = 1)
sql <- SQL(sim$data, d = 4)
